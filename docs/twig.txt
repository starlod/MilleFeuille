[挨拶]

Symfony2でよく使うTwigをまとめました。


## include - テンプレートファイル読み込み

```
{% include 'template.html.twig' %}
{% include 'template.html.twig' with {'foo': 'bar'} %}
```

### template_from_string - 文字列をテンプレートとして読み込み

文字列をテンプレートとしてインクルード

```
{% set user_template = "{{ description[0:80] }}"
<br /> Price: {{product.price}} %}

{% include template_from_string(user_template) %}
```

## リンク

```
<a href="{{ path('home') }}">Home<a/> // 絶対パス
<a href="{{ url('home') }}">Home<a/> // 相対パス
<a href="{{ path('post_show', {'id': post.id}) }}">Article1</a>
```

## block

```
<title>{% block title %}{% endblock %}</title>
<h1>{{ block('title') }}</h1>
{% block body %}{% endblock %}
```

## extends

指定したテンプレートを継承できる。Twigファイルの1行目に記述する。
多重継承はサポートされていません。`Bundle:Controller:TwigFileName`と指定できる。

```
{# app/Resources/views/base.html.twig #}
{% extends "::base.html.twig" %}

{# src/AppBundle/Resources/views/layout.html.twig #}
{% extends "AppBundle::layout.html.twig" %}

{# src/AppBundle/Resources/views/Post/layout.html.twig #}
{% extends "AppBundle:Post:index.html.twig" %}
```

ベストプラクティスは`app/Resources/views`にすべてのテンプレートを配置する。

## set

Twigは次のように文字列, 配列, 連想配列, 複数の変数定義できます。

```
{% set foo = 'foo' %}
{% set foo = [1, 2] %}
{% set foo = {'foo': 'bar'} %}
{% set foo, bar = 'foo', 'bar' %}
```

## if

```
{% if app.user %}
    {{ app.user.getName() }} is loggined.
{% endif %}
```

### 演算子

Twigで使える演算子です。優先順位が低い順に並べています。

'b-and', 'b-xor', 'b-or', 'or', 'and', '==', '!=', '&lt;', '&gt;', '&gt;=', '&lt;=', 'in', '..', '+', '-', '~', '*', '/', '//', '%', 'is', '**'

### 数値演算子

Twigでは次の数値演算子がサポートされています。

- '+': 2つの対象を加算します (演算対象は、数字にキャストされます)。'{{ 1 + 1 }}'は'2'。
- '-': 最初の数から、2番目の数を減算します。'{{ 3 - 2 }}'は'1'。
- '/': 2つの数字を除算します。 戻り値は、浮動小数点の 数値になります。'{{ 1 / 2 }}'は'{{ 0.5 }}'。
- '%': 整数で除算した余りを計算します。'{{ 11 % 7 }}'は'4'。
- '//': 2つの数字を除算し、結果を切り捨てて整数にして返します。'{{ 20 // 7 }}'は'2'。
- '*': 左の演算対象を右の演算対象で、乗算します。'{{ 2 * 2 }}' は、'4'を返します。
- '**': 左の演算対象を右の演算対象で、累乗します。'{{ 2 ** 3 }}' は、'8'を返します。

### 論理演算子

Twigでは次の論理演算子がサポートされています。
また、ビット演算子('b-and', 'b-xor', 'b-or')もサポートされています。

- and: 左右の値が、どちらもtrueの場合に、trueを返します。
- or: 左右の値が、どちらか一方、trueの場合に、trueを返します。
- not: ステートメントを否定します。
- (expr): 式をグループ化します。

### 比較演算子

Twigでは次の比較演算子がサポートされています。

'==', '!=', '&lt;', '&gt;', '&gt;=', '&lt;='

## for

### 配列のループ

一般的なTwigのループの書き方です。

```
{% for post in posts %}
    {{ post.title|e }}
{% endfor %}
```

### 配列のループ（添字付き）

```
{% for key, value in posts %}
    {{ key }}：{{ value.title|e }}
{% endfor %}
```

### 指定回数ループ

```
{% for i in range(0, 10) %}
    {{ i }},
{% endfor %}

{% for i in 0..10 %}
    {{ i }},
{% endfor %}
```

### 指定回数ループ(増分指定)

```
{% for i in range(low=1, high=10, step=2) %}
    {{ i }},
{% endfor %}
```

### reverse - 逆順ループ

```
{% for post in posts|reverse %}
    {{ post.title|e }}
{% endfor %}

{% for key, value in {1: "a", 2: "b", 3: "c"}|reverse %}
    {{ key }}: {{ value }}
{%- endfor %}
{# output: 0: c    1: b    2: a #}

{% for key, value in {1: "a", 2: "b", 3: "c"}|reverse(true) %}
    {{ key }}: {{ value }}
{%- endfor %}
{# output: 3: c    2: b    1: a #}
```

添字の値で逆順を取得したい場合は`reverse(true)`と指定する。

### ループ内で使用できる変数

| 変数            | 備考                                  |
|:---------------|:-------------------------------------|
| loop.index     | ループした回数（1から始まる）                |
| loop.index0    | ループした回数（0から始まる）                |
| loop.revindex  | ループした回数（最後からカウント、１から始まる）   |
| loop.revindex0 | ループした回数（最後からカウント、0から始まる）   |
| loop.first     | 最初の要素のときtrueを返す                 |
| loop.last      | 最後の要素のときtrueを返す                 |
| loop.length    | 配列の長さを返す                          |
| loop.parent    | ネストしてるループのとき、上階層のループ要素を取得 |

```
{% if loop.index is divisibleby(3) %}
    ...
{% endif %}
```

## 数値の操作

### number_format - 数値のフォーマットを指定する

3桁カンマ区切りの数値や小数点以下第何位まで表示するか指定できます。

```
{{ 9800.333|number_format(2, '.', ',') }}
```

### abs - 絶対値を表示する

```
{% set number = -5 %}
{{ number|abs }}
5
```

### round - 数値を四捨五入する

```
{{ 42.55|round }}
43

{{ 42.55|round(1, 'floor') }}
42.5
```

### for-if文

for文とif文を一緒に書く方法もあります。

```
<ul>
    {% for user in users if user.active %}
        <li>{{ user.username|e }}</li>
    {% endfor %}
</ul>
```

## 文字の操作

### 文字連結

Twigは文字の連結に`~`(チルダ)を使います。

```
{{ 'Hello' ~ 'World' }}
HelloWorld
```

### 大文字、小文字変換

```
{{ 'Hello'|upper }}
HELLO

{{ 'Hello'|lower }}
hello

{{ 'my first car'|title }}
My First Car

{{ 'my first car'|capitalize }}
'My first car'
```

### trim - 文字列の先頭と末尾から空白を取り除く

```
{{ '  I like Twig.  '|trim }}
{# outputs 'I like Twig.' #}
{# 全角スペースも含めて除去 #}
{{ '　 I like Twig.  '|trim("　 \t\n\r\0\x0B") }}
{# outputs 'I like Twig.' #}
```

### format - 書式を指定して表示する

```
{% set foo = 'hoge' %}
{{ "I like %s and %s."|format(foo, "bar") }}
I like hoge and bar
```

## 配列の操作

### 配列の先頭の要素を取得

```
{% set firstElement = array|first %}
```

#### 配列、連想配列、文字列でもOK

'''
{{ [1, 2, 3, 4]|first }}
{{ {a: 1, b: 2, c: 3, d: 4}|first }}
{{ '1234'|first }}
'''

すべて'1'が表示される。

### 配列の末尾の要素を取得

```
{% set lastElement = array|last %}
```

### length - 配列または文字列の長さを返す

```
{% if users|length > 10 %}
    ...
{% endif %}

{% if 'ABCDEFG'|length > 5 %}
    ...
{% endif %}
```

### keys - 連想配列のキー値を取得

```
{% for key in array|keys %}
    ...
{% endfor %}
```

### slice - 配列の一部を展開する

'''
{% for i in [1, 2, 3, 4, 5]|slice(1, 2) %}
    {# 2, 3 #}
{% endfor %}

{{ '12345'|slice(1, 2) }}
{# 23 #}
'''

### sort - 配列を並び替える

'''
{% for i in array|sort %}
    {{ i }},
{% endfor %}
'''

PHPの[asort](http://php.net/asort)と同じく連想キーと要素との関係を維持しつつ配列をソートします。

### join - 配列を結合して表示

```
{{ [1, 2, 3]|join }}
123

{{ [1, 2, 3]|join('|') }}
1|2|3
```

### max

'''
{{ max(1, 3, 2) }}
3
'''

### min

'''
{{ min(1, 3, 2) }}
1
'''

### random

'''
{{ random(['apple', 'orange', 'citrus']) }}
orange

{{ random('ABC') }}
B

{{ random() }}
15386094

{{ random(5) }}
3
'''

## 日付

### 日付型の変数を表示

Twigで日付型のデータを表示する場合、`date`フィルターを通して表示します。

```
post.publishedAt|date('d-M-y')
post.publishedAt|date('Y年m月d日')
post.publishedAt|date('Y/m/d H:i')
```

### 現在日時を表示

'''
{{ 'now'|date('Y-m-d H:i:s') }}
'''

### タイムゾーン指定

```
{{ 'now'|date('m/d/Y', 'Europe/Paris') }}
```

### 日付の変更

{{ 'now'|date_modify('+1 day')|date('m/d/Y') }}

## 変換

### convert_encoding - 文字コード変換

'''
{{ text|convert_encoding('UTF-8', 'ISO-8859-1') }}
{{ text|convert_encoding(to='UTF-8', from='ISO-8859-1') }}
{{ text|convert_encoding(from='ISO-8859-1', to='UTF-8') }}
'''

パラメータを指定しない場合は'convert_encoding(to, from)'の順番になる。

### url_encode - 文字列をURLエンコード

```
{{ "path-seg*ment"|url_encode }}
path-seg%2Ament

{{ "string with spaces"|url_encode }}
string%20with%20spaces

{{ {'param': 'value', 'foo': 'bar'}|url_encode }}
param=value&foo=bar
```

### json_encode - JSONエンコード

```
{{ data|json_encode() }}
```

### striptags - 文字列からHTMLおよびPHPタグを取り除く

```
{{ some_html|striptags }}
{{ some_html|striptags('<p><a>') }}
{# <p>と<a>タグは許可 #}
```

### escape - 特殊文字をHTMLエンティティに変換

```
{{ user.username|escape }}
{# 別名で e と省略して使えます #}
{{ user.username|e }}
```

### nl2br - 文字列内の改行コードをHTMLの改行に変換

```
{{ "I like Twig.\nYou will like it too."|nl2br }}
I like Twig.<br />
You will like it too.
```

### raw - HTMLタグをエスケープしないで出力する

```
{{ post.content|raw }}
```

### trans - 翻訳

翻訳機能を日本語をデフォルトにして有効化

```
# app/config/config.yml
parameters:
    locale: ja

framework:
    translator: { fallbacks: ["%locale%"] }
```

翻訳辞書ファイルの作成

```
# app/Resources/translations/messages.ja.yml
foo: ふう
message:
    hoge: ほげ
    bar: ばあ
    test: テストの点数は %num% です。
```

呼び出し方

```
{{ 'message.hoge'|trans }}
ほげ

{% trans %}foo{% endtrans %}
ふう

{% trans %}message.bar{% endtrans %}
ばあ

{{ 'message.test'|trans({'%num%': 69})|raw}}
テストの点数は 69 です。
```

### spaceless - 空白(スペース)の除去

HTMLタグの間のスペースを除去します。

```
{% spaceless %}
    <div>
        <strong>foo</strong>
    </div>
{% endspaceless %}
<div><strong>foo</strong></div>
```

## default

変数が未定義、中身が空の場合はdefaultフィルタに渡された値を返します。

'''
{{ var|default('var is not defined') }}
var is not defined
'''

## source

'''
{% source '../../../composer.json' %}
'''

PHPの[file_get_contents](http://php.net/manual/ja/function.file-get-contents.php)と同じ

## デバッグ

```
{{ dump(posts) }}
```

## 権限

```
{% if is_granted('ROLE_ADMIN') %}
    {# 管理者権限の処理 #}
{% endif %}
```

## グローバルテンプレート変数

'''
{# セキュリティコンテキスト #}
{{ dump(app.security) }}

{# ログインユーザーオブジェクト #}
{{ dump(app.user) }}

{# リクエストオブジェクト #}
{{ dump(app.request) }}

{# GETパラメータ取得 #}
{{ app.request.get('foo') }}

{# POSTパラメータ取得 #}
{{ app.request.request.get('foo') }}

{# セッションオブジェクト #}
{{ dump(app.session) }}

{# 環境 #}
{{ app.environment }}

{# デバッグモードであれば true、それ以外なら false #}
{{ app.debug }}

{# テンプレート情報 #}
{{ dump(_self) }}

{# コンテキスト #}
{{ dump(_context) }}

{# 文字コード #}
{{ _charset }}
'''

### よく使うグローバルテンプレート変数

#### METHOD

'''
{{ app.request.method }}
GET
'''

#### ルートディレクトリ

```
{{ app.request.basePath }}
/blog
```

#### ルートパス

'''
{{ app.request.baseUrl }}
/blog/app_dev.php
'''

#### URI

'''
{{ app.request.requestUri }}
/blog/app_dev.php/post?range=20
'''

#### パス

'''
{{ app.request.pathInfo }}
/post/
'''

#### パス名

```
{{ app.request.get('_route') }}
post_index
```

#### コントローラ名

```
{{ app.request.get('_controller') }}
AppBundle\Controller\PostController::indexAction
```

## 定数の取得

TwigからControllerやEntityで定義しているconstの値にアクセスできます。

```
{{ constant('AppBundle\\Controller\\PostController::DEFAULT_LIMIT') }}
```

